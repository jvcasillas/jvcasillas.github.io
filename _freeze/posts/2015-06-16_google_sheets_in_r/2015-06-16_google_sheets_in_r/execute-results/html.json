{
  "hash": "945217de36efc09e10b61af4daff2c95",
  "result": {
    "markdown": "---\ntitle: \"How to scrape data from Google Sheets in R\"\ndescription: |\n  How to get data from a google sheet into R. \ndate: 06-16-2015\nauthor:\n  - name: Joseph V. Casillas \n    url: https://www.jvcasillas.com\n    affiliation: Rutgers University\n    affiliation_url: https://www.rutgers.edu\nbase_url: http://www.jvcasillas.com\ncategories: [r, research]\ntwitter:\n  creator: \"@jvcasill\"\nengine: knitr\nimage: \"image.jpg\"\n---\n\n\n\n\n\nGoogle Forms offers a convenient way to collect data online. \nIt is particularly useful because you can embed the form in a webpage, link the results with a spreadsheet and publish the results online. \nThis post shows how to scrape the data from the spreadsheet (google form) in `r` using the package `RCurl`. \nYou should be able to follow along by copying and pasting the code into an R \nsession. \n\nIdeally you can use this method once you have collected data using a google \nform. \nFor our purposes I just created a google sheet and I will scrape the data from there.\n\n### Get some data\n\nTo show how this works, I simulated some data with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create fake data\n# to save in google sheet\n\nset.seed(1)\ndf <- data.frame(\n\tsubj = 1:30, \n\tgroup = gl(2, 15, labels = c(\"mono\", \"bi\")), \n\tscore = c(rnorm(15, 87, 8), rnorm(15, 94, 3))\n\t)\n```\n:::\n\n\nI then copy and pasted the data frame into a google sheet. \nTo do this, open google drive and create a new sheet. \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](./assets/img/data.png){width=100%}\n:::\n:::\n\n\nOnce you have some data in a sheet you need to do a few things before you are ready to fire up R. \n\nFirst, you need to publish your sheet to the web (File > Publish to the web...):\n\n<img width=\"400\" src=\"./assets/img/publish.png\">\n\nPublish the sheet and copy the public link from the window.\n\n<img width=\"400\" src=\"./assets/img/link.png\">\n\nAs you can see, my link is:\n\n```\nhttps://docs.google.com/spreadsheets/d/1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM/pubhtml\n```\n\nCopy your link and save it somewhere. \nWe will need it in just a second.\n\nNow we're ready for R. \nHere are the packages I used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(RCurl)\nlibrary(ggplot2)\nlibrary(DT)\nlibrary(pander)\n\n```\n:::\n\n\n### Scrape\n\nWe will use the `RCurl` package to scrape the data. \nThe command we need is \n`getForm()`. \nThe first arguement represents the URI to which the form is posted. \nYou can just use the one shown below for a google sheet. \nThe important part here is the `key` arguement. \nYou need to copy it from the link you saved above. \nThe key can be found in the last part of the link. \nHere is my link again:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhttps://docs.google.com/spreadsheets/d/1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM/pubhtml\n```\n:::\n\n\nSpecifically we want:\n\n```\n1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM\n```\n\nTherefore we can delete `https://docs.google.com/spreadsheets/d/` from the \nbeginning, as well as `/pubhtml` from the end. \nCheck the `key` arguement below. \nFinally, we use the `read.csv()` command to import the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# scrape data\n\nsheet = getForm(\"https://spreadsheets.google.com/spreadsheet/pub\", \n                hl =\"en_US\", \n                key = \"1AqS_DAThPUJuS2L2E-S5X7fM1kpIdhXQdBDZUyt-bWM\", \n                output = \"csv\", \n                .opts = list(followlocation = TRUE, \n                             verbose = TRUE, \n                             ssl.verifypeer = FALSE)) \n\ndf <- read.csv(textConnection(sheet))\n```\n:::\n\n\nLet's see if it worked...\n\n\n::: {.cell}\n\n```{.r .cell-code}\npandoc.table(df, style = \"rmarkdown\", round = 2)\n```\n:::\n\n\n|  subj  |  group  |  score  |\n|:------:|:-------:|:-------:|\n|   1    |  mono   |  81.99  |\n|   2    |  mono   |  88.47  |\n|   3    |  mono   |  80.31  |\n|   4    |  mono   |  99.76  |\n|   5    |  mono   |  89.64  |\n|   6    |  mono   |  80.44  |\n|   7    |  mono   |  90.9   |\n|   8    |  mono   |  92.91  |\n|   9    |  mono   |  91.61  |\n|   10   |  mono   |  84.56  |\n|   11   |  mono   |  99.09  |\n|   12   |  mono   |  90.12  |\n|   13   |  mono   |  82.03  |\n|   14   |  mono   |  69.28  |\n|   15   |  mono   |   96    |\n|   16   |   bi    |  93.87  |\n|   17   |   bi    |  93.95  |\n|   18   |   bi    |  96.83  |\n|   19   |   bi    |  96.46  |\n|   20   |   bi    |  95.78  |\n|   21   |   bi    |  96.76  |\n|   22   |   bi    |  96.35  |\n|   23   |   bi    |  94.22  |\n|   24   |   bi    |  88.03  |\n|   25   |   bi    |  95.86  |\n|   26   |   bi    |  93.83  |\n|   27   |   bi    |  93.53  |\n|   28   |   bi    |  89.59  |\n|   29   |   bi    |  92.57  |\n|   30   |   bi    |  95.25  |\n\nLooks good. Now we can visualize and analyze the data. \n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndf %>%\n  ggplot(., aes(x = as.numeric(group), y = score)) +\n  scale_x_discrete(limits = c(2, 1), labels = c(\"Bilingual\", \"Monolingual\")) +\n  geom_jitter() +\n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  labs(x = \"Group\", y = \"Score\")\n```\n:::\n\n\n<img width=\"650\" src=\"./assets/img/plot1.png\">\n\nAnd that's it. \n\n\n\n",
    "supporting": [
      "2015-06-16_google_sheets_in_r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}