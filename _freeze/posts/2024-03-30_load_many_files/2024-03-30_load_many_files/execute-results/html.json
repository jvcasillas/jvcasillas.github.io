{
  "hash": "397876aaeb3c807f6030b7930419b49e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to load many csv files at once\"\ndescription: |\n  In this post I show how to load many .csv files in a single data frame in R. \ndate: \"2024-03-30\"\nauthor:\n  - name: Joseph V. Casillas \n    url: https://www.jvcasillas.com\n    affiliation: Rutgers University\n    affiliation_url: https://www.rutgers.edu\nbase_url: https://www.jvcasillas.com\ncategories: [stats, tidy, programming]\ntwitter:\n  creator: \"@jvcasill\"\nengine: knitr\n---\n\n\n\n\n# The problem\n\nSometimes we collect data from different sources and need to load it all into a single data frame in R. \nIn my research this happens quite often, usually when collecting behavioral data. \nFor example, I tend to use `psychopy` a lot to present stimuli. \nThis outputs a separate .csv file for each participant. \nSo, how do you get all of those .csv files into R? \nIn this post, I show you the way I usually do it, as well as a new(er) (to me) method that is more flexible. \n\n# Some data\n\nSince the issue we are trying to solve occurs when we have more than one csv file, we will generate some test files to play with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create 2 data frames with different columns\n# and save them as .csv files\n\n# df1\ndata.frame(x = 1:3, y = c('a', 'b', 'c')) |> \n  write.csv(file = \"df1.csv\", row.names = F)\n\n# df2\ndata.frame(x = 4:6, y = c('d', 'e', 'f')) |> \n  write.csv(file = \"df2.csv\", row.names = F)\n```\n:::\n\n\nThe data frames look like this: \n\n\n::: {#tbl-ex .cell layout-ncol=\"2\" tbl-cap='Two tables' tbl-subcap='[\"mtcars\",\"Just cars\"]'}\n\n```{.r .cell-code}\ndata.frame(x = 1:3, y = c('a', 'b', 'c')) |> \n  knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|  x|y  |\n|--:|:--|\n|  1|a  |\n|  2|b  |\n|  3|c  |\n\n\n:::\n\n```{.r .cell-code}\ndata.frame(x = 4:6, y = c('d', 'e', 'f')) |> \n  write.csv(file = \"df2.csv\", row.names = F)\n```\n:::\n\n\n\n\n\n# Solution 1\n\nSo, we have these three csv files in our project folder and we want to load all three and combine them into a single data frame. \nWe are only interested in columns `x` and `y`. \n\nHere is one strategy using `readr`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(\"readr\")\n\n# Get csv files in project root, read as df\nlist.files(pattern = \".csv\") |> \n  read_csv()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 6 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     3 c    \n4     4 d    \n5     5 e    \n6     6 f    \n```\n\n\n:::\n:::\n\n\n\n# A bigger problem \n\nNow imagine that we also have the following csv files: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add z column\ndata.frame(x = 4:6, y = c('d', 'e', 'f'), z = c(TRUE, TRUE, FALSE)) |> \n  write.csv(file = \"df3.csv\", row.names = F)\n\n# Add foo column\ndata.frame(x = 7:9, y = c('g', 'h', 'i'), foo = c(FALSE, TRUE, FALSE)) |> \n  write.csv(file = \"df4.csv\", row.names = F)\n```\n:::\n\n\nOur previous solution will not work becuase of the different column names/lengths. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get csv files in project root, read as df\nlist.files(pattern = \".csv\") |> \n  read_csv()\n```\n:::\n\n\n```\n! Files must all have 2 columns:\n* File 3 has 3 columns\n```\n\n# Solution 2\n\nThe logic is as follows: \n\n1. Get a list of all csv files and read them into a separate list as data frames.\n2. Make vector of the columns you want.\n3. Select the columns you want in each df in the list, i.e., drop all the other columns you don't want.\n4. Bind all the data frames in the list to a single data frame\n\nWe will include `purrr`. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"purrr\")\n\n# Make vector of the columns you want\nmy_cols <- c(\"x\", \"y\")\n\n# Get a list of all csv files and read them into a separate list as data frames\nlist.files(pattern = \".csv\") |> \n  as.list() |> \n  map(read_csv) |> \n  # Select only the columns in my_cols in each df in the list.\n  # In other words, drop all the other columns causing problems.\n  map(.f = function(x) {x[, names(x) %in% my_cols]}) |> \n  # Bind all the data frames in the list to a single data frame\n  do.call(what = \"rbind\", args = _) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 3 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 3 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\nlgl (1): z\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nRows: 3 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): y\ndbl (1): x\nlgl (1): foo\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n       x y    \n   <dbl> <chr>\n 1     1 a    \n 2     2 b    \n 3     3 c    \n 4     4 d    \n 5     5 e    \n 6     6 f    \n 7     4 d    \n 8     5 e    \n 9     6 f    \n10     7 g    \n11     8 h    \n12     9 i    \n```\n\n\n:::\n:::\n\n\n\nA template...\n\n```r\n# Get a list of all csv files and read them into a separate list as data frames\ntemp_list <- list.files(here(\"path\", \"to\", \"folder\"), pattern = \".csv\") |> \n  as.list() |> \n  map(read_csv)\n\n# Make vector of the columns you want\nmy_cols <- c(\"participant\", \"condition\", \"response\", \"rt\")\n\n# Select only the columns in my_cols in each df in the list.\n# In other words, drop all the other columns causing problems.\ntemp_list <- Map(function(x){x[,names(x) %in% my_cols]}, temp_list)\n\n# Bind all the dataframes in the list to a single dataframe\ndat <- do.call(\"rbind\", temp_list) \n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}