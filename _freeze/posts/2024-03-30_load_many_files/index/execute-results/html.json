{
  "hash": "1cb256385502d4751683013f1788a485",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to load many csv files at once\"\ndescription: |\n  In this post I show how to load many .csv files in a single data frame in R. \ndate: \"2024-03-30\"\nauthor:\n  - name: Joseph V. Casillas \n    url: https://www.jvcasillas.com\n    affiliation: Rutgers University\n    affiliation_url: https://www.rutgers.edu\nbase_url: https://www.jvcasillas.com\ncategories: [stats, tidy, programming]\ntwitter:\n  creator: \"@jvcasill\"\nengine: knitr\n---\n\n\n\n\n# The problem\n\nSometimes we collect data from different sources and need to load it all into a single data frame in R. \nIn my research this happens quite often, usually when collecting behavioral data. \nFor example, I tend to use `psychopy` a lot to present stimuli. \nThis outputs a separate .csv file for each participant. \nSo, how do you get all of those .csv files into R? \nIn this post, I show you the way I usually do it, as well as a new(er) (to me) method that is more flexible. \n\n# Some data\n\nSince the issue we are trying to solve occurs when we have more than one csv file, we will generate some test files to play with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create 2 data frames with different columns\n# and save them as .csv files\n\n# df1\ndata.frame(x = 1:3, y = c('a', 'b', 'c')) |> \n  write.csv(file = \"df1.csv\", row.names = F)\n\n# df2\ndata.frame(x = 4:6, y = c('d', 'e', 'f')) |> \n  write.csv(file = \"df2.csv\", row.names = F)\n```\n:::\n\n\nThe data frames look like this: \n\n\n::: {#tbl-ex1 .cell layout-ncol=\"2\" tbl-cap='Two toy data frames' tbl-subcap='[\"df1\",\"df2\"]'}\n::: {.cell-output-display}\n\n\n|  x|y  |\n|--:|:--|\n|  1|a  |\n|  2|b  |\n|  3|c  |\n\n\n:::\n\n::: {.cell-output-display}\n\n\n|  x|y  |\n|--:|:--|\n|  4|d  |\n|  5|e  |\n|  6|f  |\n\n\n:::\n:::\n\n\nbut this is our desired output: \n\n\n::: {#tbl-ex2 .cell tbl-cap='Combined data frames'}\n::: {.cell-output-display}\n\n\n|  x|y  |\n|--:|:--|\n|  1|a  |\n|  2|b  |\n|  3|c  |\n|  4|d  |\n|  5|e  |\n|  6|f  |\n\n\n:::\n:::\n\n\n\n\n# Solution 1\n\nSo, let's assume we have these two csv files in the root directory of our project folder and we want to load all of them and combine them into a single data frame. \nHere is a nice two-liner using `readr`^[Note: this strategy won't work with the base R function `read.csv` because it is not vectorized.]: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(\"readr\")\n\n# Get csv files in project root, read as df\nlist.files(pattern = \".csv\") |> \n  read_csv()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n      x y    \n  <dbl> <chr>\n1     1 a    \n2     2 b    \n3     3 c    \n4     4 d    \n5     5 e    \n6     6 f    \n```\n\n\n:::\n:::\n\n\nThe output is just what we described above. \nThis works quite well for most use cases. \n\n# A bigger problem \n\nNow imagine that we also have the following csv files: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add z column\ndata.frame(x = 4:6, y = c('d', 'e', 'f'), z = c(TRUE, TRUE, FALSE)) |> \n  write.csv(file = \"df3.csv\", row.names = F)\n\n# Add foo column\ndata.frame(x = 7:9, y = c('g', 'h', 'i'), foo = c(FALSE, TRUE, FALSE)) |> \n  write.csv(file = \"df4.csv\", row.names = F)\n```\n:::\n\n\nIf we look at all 4 of them side-by-side, we can see that `df3` and `df4` have an additional column and they aren't the same (`z` and `foo`). \n\n\n::: {#tbl-ex3 .cell layout-ncol=\"4\" tbl-cap='4 toy data frames' tbl-subcap='[\"df1\",\"df2\",\"df3\",\"df4\"]'}\n::: {.cell-output-display}\n\n\n|  x|y  |\n|--:|:--|\n|  1|a  |\n|  2|b  |\n|  3|c  |\n\n\n:::\n\n::: {.cell-output-display}\n\n\n|  x|y  |\n|--:|:--|\n|  4|d  |\n|  5|e  |\n|  6|f  |\n\n\n:::\n\n::: {.cell-output-display}\n\n\n|  x|y  |z     |\n|--:|:--|:-----|\n|  4|d  |TRUE  |\n|  5|e  |TRUE  |\n|  6|f  |FALSE |\n\n\n:::\n\n::: {.cell-output-display}\n\n\n|  x|y  |foo   |\n|--:|:--|:-----|\n|  7|g  |FALSE |\n|  8|h  |TRUE  |\n|  9|i  |FALSE |\n\n\n:::\n:::\n\n\nEven though we are not interested in `z` nor `foo`, our previous solution will not work becuase of the different column names/lengths. \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get csv files in project root, read as df\nlist.files(pattern = \".csv\") |> \n  read_csv()\n```\n:::\n\n\n```\n! Files must all have 2 columns:\n* File 3 has 3 columns\n```\n\n# Solution 2\n\nThe logic is as follows. \nWe can create a list containing all the data frames, select just the columns we want, and then bind them all into a single data frame. \nWe will use `purrr` to make this happen. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(\"purrr\")\n\n# Make vector of the columns you want\nmy_cols <- c(\"x\", \"y\")\n\n# Get a list of all csv files\nlist.files(pattern = \".csv\") |> \n  as.list() |> \n  # Read elements of list into a separate list as data frames\n  map(read_csv) |> \n  # From each data frame in the list, select only the columns in my_cols, i.e., \n  # drop any other columns (z and foo)\n  map(.f = function(x) {x[, names(x) %in% my_cols]}) |> \n  # Bind all the data frames in the list to a single data frame\n  do.call(what = \"rbind\", args = _) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n       x y    \n   <dbl> <chr>\n 1     1 a    \n 2     2 b    \n 3     3 c    \n 4     4 d    \n 5     5 e    \n 6     6 f    \n 7     4 d    \n 8     5 e    \n 9     6 f    \n10     7 g    \n11     8 h    \n12     9 i    \n```\n\n\n:::\n:::\n\n\nSuccess! \n\nHere is a template to copy/paste for future me when I forget how I did this: \n\n```r\n# Make vector of the columns you want\nmy_cols <- c(\"col1\", \"col2\")\n\n# Get a list of all csv files\n# Load them as individual data frames inside a list\n# Select only the columns you want (my_cols)\n# Bind all the list elements into a single data frame\nlist.files(pattern = \".csv\") |> \n  as.list() |> \n  map(read_csv) |> \n  map(.f = function(x) {x[, names(x) %in% my_cols]}) |> \n  do.call(what = \"rbind\", args = _) \n```\n\n\n## Reproducibility information\n\nThis document was written in `quarto`.\n\n**Session info**  \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n setting  value\n version  R version 4.3.1 (2023-06-16)\n os       macOS Sonoma 14.1\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/New_York\n date     2024-03-30\n pandoc   3.1.1 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/ (via rmarkdown)\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            loadedversion       date\nbit                 4.0.5 2022-11-15\nbit64               4.0.5 2020-08-30\ncachem              1.0.8 2023-05-01\ncli                 3.6.2 2023-12-11\ncrayon              1.5.2 2022-09-29\ndevtools            2.4.5 2022-10-11\ndigest             0.6.35 2024-03-11\nellipsis            0.3.2 2021-04-29\nevaluate             0.23 2023-11-01\nfansi               1.0.6 2023-12-08\nfastmap             1.1.1 2023-02-24\nfs                  1.6.3 2023-07-20\nglue                1.7.0 2024-01-09\nhms                 1.1.3 2023-03-21\nhtmltools           0.5.7 2023-11-03\nhtmlwidgets         1.6.4 2023-12-06\nhttpuv             1.6.14 2024-01-26\njsonlite            1.8.8 2023-12-04\nknitr                1.45 2023-10-30\nlater               1.3.2 2023-12-06\nlifecycle           1.0.4 2023-11-07\nmagrittr            2.0.3 2022-03-30\nmemoise             2.0.1 2021-11-26\nmime                 0.12 2021-09-28\nminiUI            0.1.1.1 2018-05-18\npillar              1.9.0 2023-03-22\npkgbuild            1.4.3 2023-12-10\npkgconfig           2.0.3 2019-09-22\npkgload             1.3.4 2024-01-16\nprofvis             0.3.8 2023-05-02\npromises            1.2.1 2023-08-10\npurrr               1.0.2 2023-08-10\nR6                  2.5.1 2021-08-19\nRcpp               1.0.12 2024-01-09\nreadr               2.1.5 2024-01-10\nremotes           2.4.2.1 2023-07-18\nrlang               1.1.3 2024-01-10\nrmarkdown            2.26 2024-03-05\nrstudioapi         0.16.0 2024-03-24\nsessioninfo         1.2.2 2021-12-06\nshiny               1.8.0 2023-11-17\nstringi             1.8.3 2023-12-11\nstringr             1.5.1 2023-11-14\ntibble              3.2.1 2023-03-20\ntidyselect          1.2.1 2024-03-11\ntzdb                0.4.0 2023-05-12\nurlchecker          1.0.1 2021-11-30\nusethis             2.2.3 2024-02-19\nutf8                1.2.4 2023-10-22\nvctrs               0.6.5 2023-12-01\nvroom               1.6.5 2023-12-05\nxfun                 0.42 2024-02-08\nxtable              1.8-4 2019-04-21\nyaml                2.3.8 2023-12-11\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}